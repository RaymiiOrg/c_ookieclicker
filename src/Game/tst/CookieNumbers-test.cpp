#include "CookieNumbers.h"
#include "gtest/gtest.h"

struct CookieNumbersTestSuite : public ::testing::Test
{
    std::unique_ptr<CookieNumberPrinter> cp;
    CookieNumbersTestSuite()
    {
        cp = std::make_unique<CookieNumberPrinter>();
    }
};

TEST_F(CookieNumbersTestSuite, printWithoutSuffix)
{
    testing::internal::CaptureStdout();
    std::vector<CookieNumber> numbers {
        CookieNumber(1),
        CookieNumber(10),
        CookieNumber(11),
        CookieNumber(45),
        CookieNumber(99),
        CookieNumber(100),
        CookieNumber(135),
        CookieNumber(999),
        CookieNumber(1000),
        CookieNumber(4231),
        CookieNumber(20000),
        CookieNumber(43212),
        CookieNumber(987654)};
    for (const auto &n : numbers)
    {
        std::cout << cp->print(n) + " ";
    }
    std::string output = testing::internal::GetCapturedStdout();
    ASSERT_EQ(output, "1 10 11 45 99 100 135 999 1000 4231 20000 43212 987654 ");
}


TEST_F(CookieNumbersTestSuite, printWithSuffix)
{
    testing::internal::CaptureStdout();
    std::vector<CookieNumber> numbers {
        CookieNumber(9999999),
        CookieNumber(42424242),
        CookieNumber(99999999.9),
        CookieNumber(100000000),
        CookieNumber(9999999999),
        CookieNumber(10000000000),
        CookieNumber(100000000001),
        CookieNumber(1000000000000000),
        CookieNumber(10000000000000000),
        CookieNumber(100000000000000000),
        CookieNumber(1000000000000000000),
        CookieNumber("10000000000000000000"),
        CookieNumber("100000000000000000000"),
        CookieNumber("1000000000000000000000"),
        CookieNumber("1144719819892401912749029396684122481958005671979101260467392893236621867918257383955449889430362322321133260887721542254157244194509697745617726122395152454650625637283773749439767525187740228611643080"),
        CookieNumber("29732982334867582149325438874912272258649497973483149622529685538613555010863828154687010115074346034315149633447312785822266082974277863522538340841432531289626639929448668816617338316564681262640080"),
    };
    for (const auto &n : numbers)
    {
        std::cout << cp->print(n) + " ";
    }
    std::string output = testing::internal::GetCapturedStdout();
#ifdef USEBOOST_MPP
    ASSERT_EQ(output, "9,999 million 42,424 million 99,999 million 100 million 9,999 billion 10 billion 100 billion 1 quadrillion 10 quadrillion 100 quadrillion 1 quintillion 10 quintillion 100 quintillion 1 sextillion 1,144 sexsexagintillion 29,732 quinsexagintillion ");
#else
    ASSERT_EQ(output, "9,999 million 42,424 million 100,999 million 100 million 10,999 billion 10 billion 100 billion 1 quadrillion 10 quadrillion 100 quadrillion 1 quintillion 10 quintillion 100 quintillion 1 sextillion 1,144 sexsexagintillion 29,732 quinsexagintillion ");
#endif
}

TEST_F(CookieNumbersTestSuite, floatWithoutSuffix)
{
    testing::internal::CaptureStdout();
    std::vector<CookieNumber> numbers {
        CookieNumber(0.1),
        CookieNumber(0.2),
        CookieNumber(1.2),
        CookieNumber(3.0001),
        CookieNumber(4.0),
        CookieNumber(10.5),
        CookieNumber(45.389),
        CookieNumber(200.12),
        CookieNumber(1000.88),
        CookieNumber(4231.2),
        CookieNumber(20000.899),
        CookieNumber(43212.91)
    };
    for (const auto &n : numbers)
    {
        std::cout << cp->print(n) + " ";
    }
    std::string output = testing::internal::GetCapturedStdout();
#ifdef USEBOOST_MPP
    ASSERT_EQ(output, "0.1 0.2 1.1 3 4 10.5 45.3 200.1 1000.8 4231.1 20000.8 43212.9 ");
#else
    ASSERT_EQ(output, "0.1 0.2 1.2 3 4 10.5 45.3 200.1 1000.8 4231.2 20000.8 43212.9 ");
#endif
}


TEST_F(CookieNumbersTestSuite, floatWithSuffixNotPrinted)
{
    testing::internal::CaptureStdout();
    std::vector<CookieNumber> numbers {
        CookieNumber(9999999.1),
        CookieNumber(42424242.23),
        CookieNumber(99999999.9),
        CookieNumber(100000000.988),
        CookieNumber(9999999999.34),
        CookieNumber(10000000000.23),
        CookieNumber(100000000001.1),
        CookieNumber(1000000000000000.23123),
        CookieNumber(10000000000000000.2323),
        CookieNumber(100000000000000000.87),
        CookieNumber(1000000000000000000.8789),
        CookieNumber("10000000000000000000.4734"),
        CookieNumber("100000000000000000000.87"),
        CookieNumber("1000000000000000000000.9"),
        CookieNumber("1144719819892401912749029396684122481958005671979101260467392893236621867918257383955449889430362322321133260887721542254157244194509697745617726122395152454650625637283773749439767525187740228611643080.7"),
        CookieNumber("29732982334867582149325438874912272258649497973483149622529685538613555010863828154687010115074346034315149633447312785822266082974277863522538340841432531289626639929448668816617338316564681262640080.7"),
        };
    for (const auto &n : numbers)
    {
        std::cout << cp->print(n) + " ";
    }
    std::string output = testing::internal::GetCapturedStdout();
#ifdef USEBOOST_MPP
    ASSERT_EQ(output, "9,999 million 42,424 million 99,999 million 100 million 9,999 billion 10 billion 100 billion 1 quadrillion 10 quadrillion 100 quadrillion 1 quintillion 10 quintillion 100 quintillion 1 sextillion 1,144 sexsexagintillion 29,732 quinsexagintillion ");
#else
    ASSERT_EQ(output, "9,999 million 42,424 million 100,999 million 100 million 10,999 billion 10 billion 100 billion 1 quadrillion 10 quadrillion 100 quadrillion 1 quintillion 10 quintillion 100 quintillion 1 sextillion 1,144 sexsexagintillion 29,732 quinsexagintillion ");
#endif
}

TEST_F(CookieNumbersTestSuite, octoX)
{
    testing::internal::CaptureStdout();
    std::vector<CookieNumber> numbers {
        CookieNumber
        };
    for (const auto &n : numbers)
    {
        std::cout << cp->print(n) + " ";
    }
    std::string output = testing::internal::GetCapturedStdout();
    ASSERT_EQ(output, "11,897 octo x ");
}

TEST_F(CookieNumbersTestSuite, longDoubleMax)
{
    testing::internal::CaptureStdout();
    std::vector<CookieNumber> numbers {
        CookieNumber("1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240"),
        };
    for (const auto &n : numbers)
    {
        std::cout << cp->print(n) + " ";
    }
    std::string output = testing::internal::GetCapturedStdout();
    ASSERT_EQ(output, "1,189 tre dm ");
}


TEST_F(CookieNumbersTestSuite, pseusoScientificNotation)
{
    testing::internal::CaptureStdout();
    std::vector<CookieNumber> numbers {
        CookieNumber("118973149535723176502126385303097020516906332229462420044032373389173700552297072261641029033652888285354569780749557731442744315367028843419812557385374367867359320070697326320191591828296152436552951064679108661431179063216977883889613478656060039914875343321145491116008867984515486651285234014977303760000912547939396622315138362241783854274391783813871780588948754057516822634765923557697480511372564902088485522249479139937758502601177354918009979622602685950855888360815984690023564513234659447638493985927645628457966177293040780660922910271504608538808795932778162298682754783076808004015069494230341172895777710033571401055977524212405734700738625166011082837911962300846927720096515350020847447079244384854591288672300061908512647211195136146752763351956292759795725027800298079590419313960302147099703527646744553092202267965628099149823208332964124103850923918473478612192169721054348428704835340811304257300221642134891734717423480071488075100206439051723424765600472176809648610799494341570347632064355862420744350442438056613601760883747816538902780957697597728686007148702828795556714140463261583262360276289631617397848425448686060994827086796804807870251185893083854658422304090880599629459458620190376604844679092600222541053077590106576067134720012584640695703025713896098375799892695455305236856075868317922311363951946885088077187210470520395758748001314313144425494391994017575316933939236688185618912993172910425292123683515992232205099800167710278403536014082929639811512287776813570604578934353545169653956125404884644716978689321167108722908808277835051822885764606221873970285165508372099234948333443522898475123275372663606621390228126470623407535207172405866507951821730346378263135339370677490195019784169044182473806316282858685774143258116536404021840272491339332094921949842244273042701987304453662035026238695780468200360144729199712309553005720614186697485284685618651483271597448120312194675168637934309618961510733006555242148519520176285859509105183947250286387163249416761380499631979144187025430270675849519200883791516940158174004671147787720145964446117520405945350476472180797576111172084627363927960033967047003761337450955318415007379641260504792325166135484129188421134082301547330475406707281876350361733290800595189632520707167390454777712968226520622565143991937680440029238090311243791261477625596469422198137514696707944687035800439250765945161837981185939204954403611491531078225107269148697980924094677214272701240437718740921675661363493890045123235166814608932240069799317601780533819184998193300841098599393876029260139091141452600372028487213241195542428210183120421610446740462163533690058366460659115629876474552506814500393294140413149540067760295100596225302282300363147382468105964844244132486457313743759509641616804802412935187620466813563687753281467553879887177183651289394719533506188500326760735438867336800207438784965701457609034985757124304510203873049485425670247933932280911052604153852899484920399109194612991249163328991799809438033787952209313146694614970593966415237594928589096048991612194498998638483702248667224914892467841020618336462741696957630763248023558797524525373703543388296086275342774001633343405508353704850737454481975472222897528108302089868263302028525992308416805453968791141829762998896457648276528750456285492426516521775079951625966922911497778896235667095662713848201819134832168799586365263762097828507009933729439678463987902491451422274252700636394232799848397673998715441855420156224415492665301451550468548925862027608576183712976335876121538256512963353814166394951655600026415918655485005705261143195291991880795452239464962763563017858089669222640623538289853586759599064700838568712381032959192649484625076899225841930548076362021508902214922052806984201835084058693849381549890944546197789302911357651677540623227829831403347327660395223160342282471752818181884430488092132193355086987339586127607367086665237555567580317149010847732009642431878007000879734603290627894355374356444885190719161645514115576193939969076741515640282654366402676009508752394550734155613586793306603174472092444651353236664764973540085196704077110364053815007348689179836404957060618953500508984091382686953509006678332447257871219660441528492484004185093281190896363417573989716659600075948780061916409485433875852065711654107226099628815012314437794400874930194474433078438899570184271000480830501217712356062289507626904285680004771889315808935851559386317665294808903126774702966254511086154895839508779675546413794489596052797520987481383976257859210575628440175934932416214833956535018919681138909184379573470326940634289008780584694035245347939808067427323629788710086717580253156130235606487870925986528841635097252953709111431720488774740553905400942537542411931794417513706468964386151771884986701034153254238591108962471088538580868883777725864856414593426212108664758848926003176234596076950884914966244415660441955208681198977024011897314953572317650212638530309702051690633222946242004403237338917370055229707226164102903365288828535456978074955773144274431536702884341981255738537436786735932007069732632019159182829615243655295106467910866143117906321697788388961347865606003991487534332114549111600886798451548665128523401497730376000091254793939662231513836224178385427439178381387178058894875405751682263476592355769748051137256490208848552224947913993775850260117735491800997962260268595085588836081598469002356451323465944763849398592764562845796617729304078066092291027150460853880879593277816229868275478307680800401506949423034117289577771003357140105597752421240573470073862516601108283791196230084692772009651535002084744707924438485459128867230006190851264721119513614675276335195629275979572502780029807959041931396030214709970352764674455309220226796562809914982320833296412410385092391847347861219216972105434842870483534081130425730022164213489173471742348007148807510020643905172342476560047217680964861079949434157034763206435586242074435044243805661360176088374781653890278095769759772868600714870282879555671414046326158326236027628963161739784842544868606099482708679680480787025118589308385465842230409088059962945945862019037660484467909260022254105307759010657606713472001258464069570302571389609837579989269545530523685607586831792231136395194688508807718721047052039575874800131431314442549439199401757531693393923668818561891299317291042529212368351599223220509980016771027840353601408292963981151228777681357060457893435354516965395612540488464471697868932116710872290880827783505182288576460622187397028516550837209923494833344352289847512327537266360662139022812647062340753520717240586650795182173034637826313533937067749019501978416904418247380631628285868577414325811653640402184027249133933209492194984224427304270198730445366203502623869578046820036014472919971230955300572061418669748528468561865148327159744812031219467516863793430961896151073300655524214851952017628585950910518394725028638716324941676138049963197914418702543027067584951920088379151694015817400467114778772014596444611752040594535047647218079757611117208462736392796003396704700376133745095531841500737964126050479232516613548412918842113408230154733047540670728187635036173329080059518963252070716739045477771296822652062256514399193768044002923809031124379126147762559646942219813751469670794468703580043925076594516183798118593920495440361149153107822510726914869798092409467721427270124043771874092167566136349389004512323516681460893224006979931760178053381918499819330084109859939387602926013909114145260037202848721324119554242821018312042161044674046216353369005836646065911562987647455250681450039329414041314954006776029510059622530228230036314738246810596484424413248645731374375950964161680480241293518762046681356368775328146755387988717718365128939471953350618850032676073543886733680020743878496570145760903498575712430451020387304948542567024793393228091105260415385289948492039910919461299124916332899179980943803378795220931314669461497059396641523759492858909604899161219449899863848370224866722491489246784102061833646274169695763076324802355879752452537370354338829608627534277400163334340550835370485073745448197547222289752810830208986826330202852599230841680545396879114182976299889645764827652875045628549242651652177507995162596692291149777889623566709566271384820181913483216879958636526376209782850700993372943967846398790249145142227425270063639423279984839767399871544185542015622441549266530145155046854892586202760857618371297633587612153825651296335381416639495165560002641591865548500570526114319529199188079545223946496276356301785808966922264062353828985358675959906470083856871238103295919264948462507689922584193054807636202150890221492205280698420183508405869384938154989094454619778930291135765167754062322782983140334732766039522316034228247175281818188443048809213219335508698733958612760736708666523755556758031714901084773200964243187800700087973460329062789435537435644488519071916164551411557619393996907674151564028265436640267600950875239455073415561358679330660317447209244465135323666476497354008519670407711036405381500734868917983640495706061895350050898409138268695350900667833244725787121966044152849248400418509328119089636341757398971665960007594878006191640948543387585206571165410722609962881501231443779440087493019447443307843889957018427100048083050121771235606228950762690428568000477188931580893585155938631766529480890312677470296625451108615489583950877967554641379448959605279752098748138397625785921057562844017593493241621483395653501891968113890918437957347032694063428900878058469403524534793980806742732362978871008671758025315613023560648787092598652884163509725295370911143172048877474055390540094253754241193179441751370646896438615177188498670103415325423859110896247108853858086888377772586485641459342621210866475884892600317623459607695088491496624441566044195520868119897702401189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240"),
        };
    for (const auto &n : numbers)
    {
        std::cout << cp->print(n) + " ";
    }
    std::string output = testing::internal::GetCapturedStdout();
#ifdef USEBOOST_MPP
    ASSERT_EQ(output, "118.731e+14838 (too large for a suffix)  ");
#else
    ASSERT_EQ(output, "0 "); //overflow is expected
#endif
}
