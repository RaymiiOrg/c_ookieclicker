cmake_minimum_required(VERSION 3.15)
project(c_ookiecliker VERSION 1.0.6)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Threads REQUIRED)

if (${CMAKE_GENERATOR} MATCHES "Visual Studio")
    message(STATUS "CMake generator is Visual Studio. Using Windows build flags")
    add_definitions(-DNOMINMAX -D_WIN32_WINNT=0x0A00 -DLANG_CXX17 -DCOMPILER_MSVC -D__VERSION__=\"MSVC\")
    add_definitions(-DWIN32 -DOS_WIN -D_MBCS -DWIN64 -DWIN32_LEAN_AND_MEAN -DNOGDI -DPLATFORM_WINDOWS)
    add_definitions(/bigobj /nologo /EHsc /GF /FC /MP /Gm-)
    # Suppress warnings to reduce build log size.
    add_definitions(/wd4267 /wd4244 /wd4800 /wd4503 /wd4554 /wd4996 /wd4348 /wd4018)
    add_definitions(/wd4099 /wd4146 /wd4267 /wd4305 /wd4307)
    add_definitions(/wd4715 /wd4722 /wd4723 /wd4838 /wd4309 /wd4334)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
endif()

if (STATIC_COMPILE)
    # Fix segfault when statically compiling.
    # https://stackoverflow.com/questions/35116327/when-g-static-link-pthread-cause-segmentation-fault-why
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static -lrt -pthread -Wl,--whole-archive -lpthread -Wl,--no-whole-archive")
    SET(CMAKE_EXE_LINKER_FLAGS "-static")
    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
    SET(BUILD_SHARED_LIBS OFF)
endif()

message(STATUS "Cmake Generator: ${CMAKE_GENERATOR}")

if (USEBOOST_MPP)
        include_directories("lib/boost_176_0/")
        set(BOOST_USE_STATIC_LIBS ON)
        set(BOOST_USE_MULTITHREADED ON)
        set(BOOST_USE_STATIC_RUNTIME ON)
        set(USEBOOST_MPP "YES")
endif()

if (NOT ${CMAKE_GENERATOR} MATCHES "Visual Studio")
    message(STATUS "CMake generator is NOT Visual Studio. Using regular build flags")

    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
        message(STATUS "Debug build")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O0 -U_FORTIFY_SOURCE -ggdb")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -Wno-unknown-pragmas -U_FORTIFY_SOURCE -ggdb -Wall")
    elseif (CMAKE_BUILD_TYPE STREQUAL "Release")
        message(STATUS "Release build")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2 ")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -O2 -DNDEBUG")
    endif()
endif()

if (BUILD_TESTS)
    set(GOOGLETEST_VERSION 3.14)
    enable_testing()
    add_subdirectory(lib/googletest-1.11.0)
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(CXX_FILESYSTEM_LIBRARIES)
elseif (NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
   set(CXX_FILESYSTEM_LIBRARIES stdc++fs)
else()
    set(CXX_FILESYSTEM_LIBRARIES)
endif()

include_directories(src)
add_subdirectory(src)

find_package(Git)
if (GIT_FOUND)
    execute_process(COMMAND
            "${GIT_EXECUTABLE}" describe --match=NeVeRmAtCh --always --abbrev=40 --dirty
            WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
            OUTPUT_VARIABLE GIT_SHA
            ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)

    set(PACKAGE_GITSHA "\"${GIT_SHA}\"")
endif()

set(PACKAGE ${PROJECT_NAME})
set(PACKAGE_NAME string(TOLOWER ${PROJECT_NAME}))
set(PACKAGE_VERSION ${PROJECT_VERSION})
set(PACKAGE_STRING ${PACKAGE_NAME}-${PACKAGE_VERSION})
set(PACKAGE_TARNAME ${PACKAGE_STRING}.tar.gz)
set(PACKAGE_URL "https://raymii.org")

install(TARGETS cookieclicker_linux DESTINATION bin)

if(USEBOOST_MPP)
    message(STATUS "Use Boost MPP lib   : YES")
else()
    message(STATUS "Use Boost MPP lib   : NO")
endif()
message(STATUS "C++ compiler flags  : ${CMAKE_CXX_FLAGS}")
message(STATUS "C compiler flags    : ${CMAKE_C_FLAGS}")
message(STATUS "Linker flags        : ${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_STATIC_LINKER_FLAGS}")
